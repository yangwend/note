/*
flex: 弹性布局盒模型（具体参见 flex 布局教程描述）

(1) 适用场景：
    1. 在不同方向排列元素；
    2. 重新排列元素的显示位置；
    3. 更改元素的对齐方式；
    4. 动态将元素装入容器；

(2) 不适用场景：
    1. 整体页面布局；
    2. 低版本浏览器（旧版本浏览器不支持该属性）；
    http://css88.b0.upaiyun.com/css88/2017/08/0-6RNstrtiyZlS8sc7.png
    
(3) 使用范围：
    1. 任何容器(display: flex;)；
    2. 行内元素(display: inline-flex;)；
    3. Webkit 内核的浏览器，必须加上 -webkit 前缀(display: -webkit-flex;)；
    4. 设为 Flex 布局以后，子元素的 float、clear、vertical-align 属性将失效；

(4) 概念：
    采用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。
    它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。

(5) 容器主轴：
    1. 水平主轴：start - end；
    2. 垂直交叉轴：start - end；

(6) 容器属性：采用 Flex 布局的元素
    1. flex-direction
    2. flex-wrap
    3. flex-flow
    4. justify-content
    5. align-items
    6. align-content

(7) flex-direction：决定主轴的方向（即项目的排列方向）
    .box {
        flex-direction: row | row-reverse | column | column-reverse;
    }
    1. row（默认值）：主轴为水平方向，起点在左端。
    2. row-reverse：主轴为水平方向，起点在右端。
    3. column：主轴为垂直方向，起点在上沿。
    4. column-reverse：主轴为垂直方向，起点在下沿。

(8) flex-wrap：如果一条轴线排不下，如何换行
    .box{
        flex-wrap: nowrap | wrap | wrap-reverse;
    }
    1. nowrap（默认）：不换行。
    2. wrap：换行，第一行在上方。
    3. wrap-reverse：换行，第一行在下方。

(9) flex-flow：flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap

(10) justify-content：项目在主轴上的对齐方式
    .box {
        justify-content: flex-start | flex-end | center | space-evenly | space-between | space-around;
    }
    1. flex-start（默认值）：左对齐；
    2. flex-end：右对齐；
    3. center： 居中；
    4. space-evenly：flex 容器起始边缘和第一个 flex 项之间的间距和每个相邻 flex 项之间的间距相等，高版本浏览器支持；
    5. space-between：两端对齐，项目之间的间隔都相等；
    6. space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

(11) align-items：项目在交叉轴上的对齐方式（假设交叉轴从上到下）
    .box {
        align-items: flex-start | flex-end | center | baseline | stretch;
    }
    1. flex-start：交叉轴的起点对齐。
    2. flex-end：交叉轴的终点对齐。
    3. center：交叉轴的中点对齐。
    4. baseline: 项目的第一行文字的基线对齐。
    5. stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

(12) align-content：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
    .box {
        align-content: flex-start | flex-end | center | space-between | space-around | stretch;
    }
    1. flex-start：与交叉轴的起点对齐。
    2. flex-end：与交叉轴的终点对齐。
    3. center：与交叉轴的中点对齐。
    4. space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
    5. space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
    6. stretch（默认值）：轴线占满整个交叉轴。

(13) 项目属性：采用 Flex 布局的元素的所有子元素
    1. order
    2. flex-grow
    3. flex-shrink
    4. flex-basis
    5. flex
    6. align-self

(14) order：定义项目的排列顺序。数值越小，排列越靠前，默认为0
    .item {
        order: <integer>;
    }

(15) flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
    .item {
        flex-grow: <number>; // default 0
    }
    所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。
    如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
    即，对剩余空间进行比例划分。

(16) flex-shrink：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小
    .item {
        flex-shrink: <number>; // default 1
    }
    如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。
    如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
    负值对该属性无效。

(17) flex-basis：在分配多余空间之前，项目占据的主轴空间（main size）。
    浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。
    .item {
        flex-basis: <length> | auto; // default auto
    }
    可以设置为 100px 或者 90% 等。

(18) flex：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
    .item {
        flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
    }
    快捷值：auto (1 1 auto) 和 none (0 0 auto)

(19) align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。
    默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
    .item {
        align-self: auto | flex-start | flex-end | center | baseline | stretch;
    }
    属性与 align-items属性一致。
*/